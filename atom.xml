<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tangminjie.github.io</id>
    <title>Tangminjie blog</title>
    <updated>2022-04-17T17:20:41.074Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tangminjie.github.io"/>
    <link rel="self" href="https://tangminjie.github.io/atom.xml"/>
    <logo>https://tangminjie.github.io/images/avatar.png</logo>
    <icon>https://tangminjie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Tangminjie blog</rights>
    <entry>
        <title type="html"><![CDATA[类型]]></title>
        <id>https://tangminjie.github.io/post/solidity-leixing/</id>
        <link href="https://tangminjie.github.io/post/solidity-leixing/">
        </link>
        <updated>2022-04-17T15:49:30.000Z</updated>
        <content type="html"><![CDATA[<p>Solidity 是一种静态类型语言，这意味着每个变量（状态变量和局部变量）都需要在编译时指定变量的类型。<br>
Solidity 提供了几种基本类型，并且基本类型可以用来组合出复杂类型。<br>
需要注意以下几点：<br>
1.“undefined”或“null”值的概念在Solidity中不存在。<br>
2.变量声明后将有默认初始值，其初始值字节表示全部为零。<br>
3.bool 类型的默认值是 false。<br>
4.uint 或 int 类型的默认值是 0 。<br>
5.静态大小的数组和 bytes1 到 bytes32 ，每个单独的元素将被初始化为与其类型相对应的默认值。<br>
6.对于动态大小的数组 bytes 和 string 类型，其默认缺省值是一个空数组或空字符串。<br>
7.对于 enum 类型, 默认值是第一个成员。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[合约结构]]></title>
        <id>https://tangminjie.github.io/post/solidity/</id>
        <link href="https://tangminjie.github.io/post/solidity/">
        </link>
        <updated>2022-03-17T15:02:21.000Z</updated>
        <content type="html"><![CDATA[<p><strong>前言</strong><br>
solidity作为以太坊网络中的智能合约编程语言，这个篇章将以合约结构，类型，单位和全局变量，表达式和控制结构，以及合约demo来整理solidity相关的基础内容。</p>
<p><strong>状态变量</strong><br>
状态变量是永久地存储在合约存储中的。</p>
<pre><code class="language-pragma">
contract TinyStorage {
    uint storedXlbData; // 状态变量
    // ...
}
</code></pre>
<p><strong>函数</strong><br>
函数是代码的可执行单元。函数通常在合约内部定义，但也可以在合约外定义</p>
<pre><code class="language-//">pragma solidity &gt;0.7.0 &lt;0.9.0;

contract TinyAuction {
    function Mybid() public payable { // 定义函数
        // ...
    }
}
// Helper function defined outside of a contract
function helper(uint x) pure returns (uint) {
    return x * 2;
}
</code></pre>
<p><strong>函数修改器</strong><br>
函数修改器modifier可以用来以声明的方式修改函数语义。</p>
<pre><code class="language-pragma">
contract MyPurchase {
    address public seller;

    modifier onlySeller() { // 修改器
        require(
            msg.sender == seller,
            &quot;Only seller can call this.&quot;
        );
        _;
    }

    function abort() public onlySeller { // 修改器用法
        // ...
    }
}
</code></pre>
<p><strong>事件 Event</strong><br>
事件是能方便地调用以太坊虚拟机日志功能的接口。</p>
<pre><code class="language-pragma">contract TinyAuction {
    event HighestBidIncreased(address bidder, uint amount); // 事件

    function bid() public payable {
        // ...
        emit HighestBidIncreased(msg.sender, msg.value); // 触发事件
    }
}
</code></pre>
<p><strong>结构体</strong><br>
结构体是可以将几个变量分组的自定义类型。</p>
<pre><code class="language-pragma">
contract TinyBallot {
    struct Voter { // 结构体
        uint weight;
        bool voted;
        address delegate;
        uint vote;
    }
}
</code></pre>
<p><strong>枚举类型</strong><br>
枚举可用来创建由一定数量的“常量值”构成的自定义类型</p>
<pre><code class="language-pragma">
contract Upchain {
    enum State { Created, Locked, InValid } // 枚举
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://tangminjie.github.io/post/hello-gridea/</id>
        <link href="https://tangminjie.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>